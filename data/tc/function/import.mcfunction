#   To add a new program to the list, follow the examples below
#
#   Numbers should be positive and greater than 1
#
#   To load the instructions in game, hold a disc and run:
#
#      /trigger tc.trigger set <number>
#
#   Replace <number> with the one you want to load


# Mine a square area with side [size]. After each layer, return to the starting position and start the next layer one block below.
execute if score @s tc.trigger matches 1 run data modify storage tc:tmp item.components."minecraft:custom_data".tc.Instructions set value [{PauseOnError: 1b, AutoFuel: 1b, Locked: 1b, AutoMine: 1b, SafeMine:1b, ShowText:0b, DamagePlayers:0b}, {A: {name: '{"text":"size"}', type: "value", operation: "=", value: 8}, C: 91}, {C: 90}, {A: {direction: "down"}, C: 1}, {A: {name: '{"text":"y"}', type: "value", operation: "=", value: 0}, C: 91}, {A: {name: '{"text":"x"}', type: "value", operation: "=", value: 1}, C: 91}, {A: {direction: "forward"}, C: 1}, {A: {name: '{"text":"x"}', type: "value", operation: "+=", value: 1}, C: 91}, {A: {name: '{"text":"x"}', condition: "counter", type: "counter", operation: "<", value: '{"text":"size"}'}, C: 92}, {A: {operation: "remove", line: 3}, C: 95}, {A: {direction: "left"}, C: 2}, {A: {direction: "forward"}, C: 1}, {A: {direction: "left"}, C: 2}, {A: {name: '{"text":"x"}', type: "value", operation: "=", value: 1}, C: 91}, {A: {direction: "forward"}, C: 1}, {A: {name: '{"text":"x"}', type: "value", operation: "+=", value: 1}, C: 91}, {A: {name: '{"text":"x"}', condition: "counter", type: "counter", operation: "<", value: '{"text":"size"}'}, C: 92}, {A: {operation: "remove", line: 3}, C: 95}, {A: {name: '{"text":"y"}', type: "value", operation: "+=", value: 2}, C: 91}, {A: {name: '{"text":"y"}', condition: "counter", type: "counter", operation: ">=", value: '{"text":"size"}'}, C: 92}, {A: {operation: "add", line: 5}, C: 95}, {A: {direction: "right"}, C: 2}, {A: {direction: "forward"}, C: 1}, {A: {direction: "right"}, C: 2}, {A: {operation: "set", line: 5}, C: 95}, {A: {direction: "left"}, C: 2}, {A: {name: '{"text":"x"}', type: "value", operation: "=", value: 1}, C: 91}, {A: {direction: "forward"}, C: 1}, {A: {name: '{"text":"x"}', type: "value", operation: "+=", value: 1}, C: 91}, {A: {name: '{"text":"x"}', condition: "counter", type: "counter", operation: "<", value: '{"text":"size"}'}, C: 92}, {A: {operation: "remove", line: 3}, C: 95}, {A: {direction: "left"}, C: 2}, {A: {operation: "set", line: 3}, C: 95}]

# Plant an oak sapling, wait for oak log, break the logs above until there's none, return to the starting position and restart.
execute if score @s tc.trigger matches 2 run data modify storage tc:tmp item.components."minecraft:custom_data".tc.Instructions set value [{PauseOnError: 1b, AutoFuel: 1b, SafeMine: 1b, Locked: 1b, ShowText: 0b, AutoMine: 1b, DamagePlayers: 0b}, {A: {condition: "block", block: "air", direction: "forward"}, C: 92}, {A: {item: "minecraft:oak_sapling", direction: "forward"}, C: 5}, {C: 96}, {A: {condition: "block", block: "minecraft:oak_log", direction: "forward"}, C: 92}, {A: {operation: "set", line: 10}, C: 95}, {A: {operation: "set", line: 1}, C: 95}, {C: 90}, {C: 90}, {C: 90}, {A: {direction: "forward"}, C: 1}, {A: {name: '{"text":"height"}', type: "value", operation: "=", value: 0}, C: 91}, {A: {condition: "block", block: "minecraft:oak_log", direction: "up"}, C: 93}, {A: {operation: "set", line: 20}, C: 95}, {A: {direction: "up"}, C: 1}, {A: {name: '{"text":"height"}', type: "value", operation: "+=", value: 1}, C: 91}, {A: {operation: "set", line: 12}, C: 95}, {C: 90}, {C: 90}, {C: 90}, {A: {direction: "down"}, C: 1}, {A: {name: '{"text":"height"}', type: "value", operation: "-=", value: 1}, C: 91}, {A: {name: '{"text":"height"}', condition: "counter", type: "value", operation: ">=", value: 1}, C: 92}, {A: {operation: "remove", line: 3}, C: 95}, {A: {direction: "back"}, C: 1}, {A: {operation: "set", line: 1}, C: 95}]

# Build a carrot farm, [size_x] by [size_y], and maintain it. Requires an equipped hoe, carrots and dirt.
execute if score @s tc.trigger matches 3 run data modify storage tc:tmp item.components."minecraft:custom_data".tc.Instructions set value [{PauseOnError: 1b, AutoFuel: 1b, Locked: 1b, AutoMine: 1b, SafeMine:1b, ShowText:0b, DamagePlayers:0b}, {A: {name: '{"text":"size_x"}', type: "value", operation: "=", value: 8}, C: 91}, {A: {name: '{"text":"size_y"}', type: "value", operation: "=", value: 5}, C: 91}, {C: 90}, {A: {direction: "up"}, C: 1}, {A: {name: '{"text":"y"}', type: "value", operation: "=", value: 1}, C: 91}, {A: {name: '{"text":"x"}', type: "value", operation: "=", value: 1}, C: 91}, {A: {condition: "block", block: "minecraft:carrot", direction: "down"}, C: 92}, {A: {operation: "set", line: 16}, C: 95}, {A: {direction: "down"}, C: 1}, {A: {direction: "down"}, C: 3}, {A: {item: "minecraft:dirt", direction: "down"}, C: 5}, {A: {item: "tool", direction: "down"}, C: 5}, {A: {direction: "up"}, C: 1}, {A: {item: "minecraft:carrot", direction: "down"}, C: 5}, {C: 90}, {A: {direction: "down"}, C: 10}, {A: {name: '{"text":"x"}', condition: "counter", type: "counter", operation: ">=", value: '{"text":"size_x"}'}, C: 92}, {A: {operation: "set", line: 22}, C: 95}, {A: {name: '{"text":"x"}', type: "value", operation: "+=", value: 1}, C: 91}, {A: {direction: "forward"}, C: 1}, {A: {operation: "set", line: 7}, C: 95}, {A: {name: '{"text":"x"}', condition: "counter", type: "value", operation: "<=", value: 1}, C: 92}, {A: {operation: "add", line: 4}, C: 95}, {A: {direction: "back"}, C: 1}, {A: {name: '{"text":"x"}', type: "value", operation: "-=", value: 1}, C: 91}, {A: {operation: "set", line: 22}, C: 95}, {A: {name: '{"text":"y"}', condition: "counter", type: "counter", operation: ">=", value: '{"text":"size_y"}'}, C: 92}, {A: {operation: "set", line: 34}, C: 95}, {A: {direction: "left"}, C: 2}, {A: {direction: "forward"}, C: 1}, {A: {direction: "right"}, C: 2}, {A: {name: '{"text":"y"}', type: "value", operation: "+=", value: 1}, C: 91}, {A: {operation: "set", line: 7}, C: 95}, {A: {direction: "right"}, C: 2}, {A: {name: '{"text":"y"}', condition: "counter", type: "value", operation: "<=", value: 1}, C: 92}, {A: {operation: "set", line: 40}, C: 95}, {A: {name: '{"text":"y"}', type: "value", operation: "-=", value: 1}, C: 91}, {A: {direction: "forward"}, C: 1}, {A: {operation: "remove", line: 4}, C: 95}, {A: {direction: "left"}, C: 2}, {A: {operation: "set", line: 7}, C: 95}]

# Dance! - Generate a random number between 1 and 6 and choose a move/turn direction based on the result.
execute if score @s tc.trigger matches 4 run data modify storage tc:tmp item.components."minecraft:custom_data".tc.Instructions set value [{PauseOnError: 0b, AutoFuel: 1b, Locked: 1b, AutoMine: 0b, SafeMine:1b, ShowText:0b, DamagePlayers:0b}, {A: {name: '{"text":"direction"}', type: "random", operation: "=", value: 6}, C: 91}, {A: {name: '{"text":"direction"}', condition: "counter", type: "value", operation: "=", value: 1}, C: 92}, {A: {direction: "forward"}, C: 1}, {A: {name: '{"text":"direction"}', condition: "counter", type: "value", operation: "=", value: 2}, C: 92}, {A: {direction: "back"}, C: 1}, {A: {name: '{"text":"direction"}', condition: "counter", type: "value", operation: "=", value: 3}, C: 92}, {A: {direction: "left"}, C: 1}, {A: {name: '{"text":"direction"}', condition: "counter", type: "value", operation: "=", value: 4}, C: 92}, {A: {direction: "right"}, C: 1}, {A: {name: '{"text":"direction"}', condition: "counter", type: "value", operation: "=", value: 5}, C: 92}, {A: {direction: "left"}, C: 2}, {A: {name: '{"text":"direction"}', condition: "counter", type: "value", operation: "=", value: 6}, C: 92}, {A: {direction: "right"}, C: 2}, {A: {operation: "set", line: 1}, C: 95}]

# Travel to a defined position, [target_x] [target_y] [target_z]. Start by moving forward to understand the facing direction and turn South. Travel to target Y, Z, X.
execute if score @s tc.trigger matches 5 run data modify storage tc:tmp item.components."minecraft:custom_data".tc.Instructions set value [{PauseOnError: 1b, AutoFuel: 1b, Locked: 1b, AutoMine: 1b, SafeMine:1b, ShowText:0b, DamagePlayers:0b}, {A: {name: '{"text":"target_x"}', type: "value", operation: "=", value: -15}, C: 91}, {A: {name: '{"text":"target_y"}', type: "value", operation: "=", value: 64}, C: 91}, {A: {name: '{"text":"target_z"}', type: "value", operation: "=", value: 10}, C: 91}, {C: 90}, {A: {name: '{"text":"x"}', type: "pos", operation: "=", value: "x"}, C: 91}, {A: {name: '{"text":"z"}', type: "pos", operation: "=", value: "z"}, C: 91}, {A: {direction: "forward"}, C: 1}, {A: {name: '{"text":"new_x"}', type: "pos", operation: "=", value: "x"}, C: 91}, {A: {name: '{"text":"new_z"}', type: "pos", operation: "=", value: "z"}, C: 91}, {A: {direction: "back"}, C: 1}, {A: {name: '{"text":"new_x"}', condition: "counter", type: "counter", operation: ">", value: '{"text":"x"}'}, C: 92}, {A: {direction: "right"}, C: 2}, {A: {name: '{"text":"new_x"}', condition: "counter", type: "counter", operation: "<", value: '{"text":"x"}'}, C: 92}, {A: {direction: "left"}, C: 2}, {A: {name: '{"text":"new_z"}', condition: "counter", type: "counter", operation: ">", value: '{"text":"z"}'}, C: 92}, {A: {operation: "set", line: 20}, C: 95}, {A: {name: '{"text":"new_z"}', condition: "counter", type: "counter", operation: "<", value: '{"text":"z"}'}, C: 92}, {A: {direction: "back"}, C: 2}, {C: 90}, {A: {name: '{"text":"y"}', type: "counter", operation: "=", value: '{"text":"target_y"}'}, C: 91}, {A: {name: '{"text":"y"}', type: "pos", operation: "-=", value: "y"}, C: 91}, {A: {name: '{"text":"y"}', condition: "counter", type: "value", operation: "=", value: 0}, C: 92}, {A: {operation: "set", line: 30}, C: 95}, {A: {name: '{"text":"y"}', condition: "counter", type: "value", operation: ">", value: 0}, C: 92}, {A: {direction: "up"}, C: 1}, {A: {name: '{"text":"y"}', condition: "counter", type: "value", operation: "<", value: 0}, C: 92}, {A: {direction: "down"}, C: 1}, {A: {operation: "set", line: 20}, C: 95}, {C: 90}, {A: {name: '{"text":"z"}', type: "counter", operation: "=", value: '{"text":"target_z"}'}, C: 91}, {A: {name: '{"text":"z"}', type: "pos", operation: "-=", value: "z"}, C: 91}, {A: {name: '{"text":"z"}', condition: "counter", type: "value", operation: "=", value: 0}, C: 92}, {A: {operation: "set", line: 39}, C: 95}, {A: {name: '{"text":"z"}', condition: "counter", type: "value", operation: ">", value: 0}, C: 92}, {A: {direction: "forward"}, C: 1}, {A: {name: '{"text":"z"}', condition: "counter", type: "value", operation: "<", value: 0}, C: 92}, {A: {direction: "back"}, C: 1}, {A: {operation: "set", line: 30}, C: 95}, {A: {direction: "left"}, C: 2}, {A: {name: '{"text":"x"}', type: "counter", operation: "=", value: '{"text":"target_x"}'}, C: 91}, {A: {name: '{"text":"x"}', type: "pos", operation: "-=", value: "x"}, C: 91}, {A: {name: '{"text":"x"}', condition: "counter", type: "value", operation: "=", value: 0}, C: 92}, {A: {operation: "set", line: 49}, C: 95}, {A: {name: '{"text":"x"}', condition: "counter", type: "value", operation: ">", value: 0}, C: 92}, {A: {direction: "forward"}, C: 1}, {A: {name: '{"text":"x"}', condition: "counter", type: "value", operation: "<", value: 0}, C: 92}, {A: {direction: "back"}, C: 1}, {A: {operation: "set", line: 40}, C: 95}, {A: {direction: "right"}, C: 2}]

# ADD YOUR OWN PROGRAMS BELOW, FOLLOWING THE EXAMPLES ABOVE
