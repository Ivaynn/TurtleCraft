#   To add a new program to the list, follow the examples below
#
#   Numbers should be positive and greater than 1
#
#   To load the instructions in game, hold a disc and run:
#
#      /trigger tc.trigger set <number>
#
#   Replace <number> with the one you want to load


# Mine a rectangle in a line pattern, with specified length, width and height
execute if score @s tc.trigger matches 1 run data modify storage tc:tmp import set value [{PauseOnError: 1b, AutoFuel: 0b, SafeMine: 1b, Locked: 1b, ShowText: 0b, ClearCounters: 1b, AutoMine: 1b, DamagePlayers: 0b}, {A: {line: 7, operation: "set"}, C: 95}, {A: {comment: ""}, C: 90}, {A: {comment: "> EXAMPLE PROGRAM 1"}, C: 90}, {A: {comment: "Digs a rectangular hole with a"}, C: 90}, {A: {comment: "specified size in a line pattern"}, C: 90}, {A: {comment: ""}, C: 90}, {A: {name: "length", type: "value", operation: "=", value: 8}, C: 91}, {A: {name: "width", type: "value", operation: "=", value: 8}, C: 91}, {A: {name: "height", type: "value", operation: "=", value: 64}, C: 91}, {A: {comment: "Program start"}, C: 90}, {A: {comment: ""}, C: 90}, {A: {condition: "counter", name: "length", type: "value", operation: "<", value: 1}, C: 92}, {C: 98}, {A: {condition: "counter", name: "width", type: "value", operation: "<", value: 1}, C: 92}, {C: 98}, {A: {condition: "counter", name: "height", type: "value", operation: "<", value: 1}, C: 92}, {C: 98}, {A: {comment: ""}, C: 90}, {A: {comment: ""}, C: 90}, {A: {comment: "mine 1 or 2 rows"}, C: 90}, {A: {name: "dy", type: "counter", operation: "=", value: "width"}, C: 91}, {A: {comment: ""}, C: 90}, {A: {name: "dx", type: "counter", operation: "=", value: "length"}, C: 91}, {A: {name: "dx", type: "value", operation: "-=", value: 1}, C: 91}, {A: {condition: "counter", name: "dx", type: "value", operation: "<", value: 1}, C: 92}, {A: {line: 30, operation: "set"}, C: 95}, {A: {direction: "forward"}, C: 1}, {A: {line: 4, operation: "remove"}, C: 95}, {A: {comment: ""}, C: 90}, {A: {direction: "left"}, C: 2}, {A: {name: "dy", type: "value", operation: "-=", value: 1}, C: 91}, {A: {condition: "counter", name: "dy", type: "value", operation: ">", value: 0}, C: 92}, {A: {direction: "forward"}, C: 1}, {A: {direction: "left"}, C: 2}, {A: {name: "dx", type: "value", operation: "+=", value: 1}, C: 91}, {A: {condition: "counter", name: "dx", type: "counter", operation: ">=", value: "length"}, C: 92}, {A: {line: 41, operation: "set"}, C: 95}, {A: {direction: "forward"}, C: 1}, {A: {line: 4, operation: "remove"}, C: 95}, {A: {comment: "prepare the next 2 rows"}, C: 90}, {A: {name: "dy", type: "value", operation: "-=", value: 1}, C: 91}, {A: {condition: "counter", name: "dy", type: "value", operation: "<", value: 1}, C: 92}, {A: {line: 51, operation: "set"}, C: 95}, {A: {direction: "right"}, C: 2}, {A: {direction: "forward"}, C: 1}, {A: {direction: "right"}, C: 2}, {A: {line: 23, operation: "set"}, C: 95}, {A: {comment: ""}, C: 90}, {A: {comment: ""}, C: 90}, {A: {comment: "return to starting position"}, C: 90}, {A: {direction: "left"}, C: 2}, {A: {name: "dy", type: "value", operation: "=", value: 0}, C: 91}, {A: {name: "dy", type: "value", operation: "+=", value: 1}, C: 91}, {A: {condition: "counter", name: "dy", type: "counter", operation: ">=", value: "width"}, C: 92}, {A: {line: 61, operation: "set"}, C: 95}, {A: {direction: "forward"}, C: 1}, {A: {line: 4, operation: "remove"}, C: 95}, {A: {comment: ""}, C: 90}, {A: {comment: ""}, C: 90}, {A: {comment: "next layer"}, C: 90}, {A: {direction: "left"}, C: 2}, {A: {name: "height", type: "value", operation: "-=", value: 1}, C: 91}, {A: {condition: "counter", name: "height", type: "value", operation: "<", value: 1}, C: 92}, {C: 98}, {A: {direction: "down"}, C: 1}, {A: {line: 21, operation: "set"}, C: 95}]

# Plant an oak sapling, wait for oak log, break the logs above until there's none, return to the starting position and restart
execute if score @s tc.trigger matches 2 run data modify storage tc:tmp import set value [{PauseOnError: 1b, AutoFuel: 0b, SafeMine: 1b, Locked: 1b, ShowText: 0b, ClearCounters: 1b, AutoMine: 1b, DamagePlayers: 0b}, {A: {line: 11, operation: "set"}, C: 95}, {A: {comment: ""}, C: 90}, {A: {comment: "> EXAMPLE PROGRAM 2"}, C: 90}, {A: {comment: "Plants an oak sapling, waits for"}, C: 90}, {A: {comment: "it to grow and collects its wood"}, C: 90}, {A: {comment: ""}, C: 90}, {A: {comment: ""}, C: 90}, {A: {comment: ""}, C: 90}, {A: {comment: ""}, C: 90}, {A: {comment: "plant the sapling and wait..."}, C: 90}, {A: {comment: ""}, C: 90}, {A: {item: "minecraft:oak_sapling"}, C: 8}, {A: {condition: "block", block: "air", direction: "forward"}, C: 92}, {A: {item: "minecraft:oak_sapling", direction: "forward"}, C: 5}, {C: 96}, {A: {condition: "block", block: "minecraft:oak_log", direction: "forward"}, C: 92}, {A: {line: 22, operation: "set"}, C: 95}, {A: {line: 12, operation: "set"}, C: 95}, {A: {comment: ""}, C: 90}, {A: {comment: "collect the wood"}, C: 90}, {A: {comment: ""}, C: 90}, {A: {direction: "forward"}, C: 1}, {A: {name: "height", type: "value", operation: "=", value: 0}, C: 91}, {A: {condition: "block", block: "minecraft:oak_log", direction: "up"}, C: 93}, {A: {line: 32, operation: "set"}, C: 95}, {A: {direction: "up"}, C: 1}, {A: {name: "height", type: "value", operation: "+=", value: 1}, C: 91}, {A: {line: 4, operation: "remove"}, C: 95}, {A: {comment: ""}, C: 90}, {A: {comment: "return to starting position and restart"}, C: 90}, {A: {comment: ""}, C: 90}, {A: {direction: "down"}, C: 1}, {A: {name: "height", type: "value", operation: "-=", value: 1}, C: 91}, {A: {condition: "counter", name: "height", type: "value", operation: ">=", value: 1}, C: 92}, {A: {line: 3, operation: "remove"}, C: 95}, {A: {direction: "back"}, C: 1}, {A: {line: 12, operation: "set"}, C: 95}]

# TODO - Build a carrot farm, [size_x] by [size_y], and maintain it. Requires an equipped hoe, carrots and dirt.
# execute if score @s tc.trigger matches 3 run data modify storage tc:tmp import set value [{PauseOnError: 1b, AutoFuel: 1b, Locked: 1b, AutoMine: 1b, SafeMine:1b, ShowText:0b, DamagePlayers:0b, ClearCounters:1b}, {A: {name: '{"text":"size_x"}', type: "value", operation: "=", value: 8}, C: 91}, {A: {name: '{"text":"size_y"}', type: "value", operation: "=", value: 5}, C: 91}, {C: 90}, {A: {direction: "up"}, C: 1}, {A: {name: '{"text":"y"}', type: "value", operation: "=", value: 1}, C: 91}, {A: {name: '{"text":"x"}', type: "value", operation: "=", value: 1}, C: 91}, {A: {condition: "block", block: "minecraft:carrot", direction: "down"}, C: 92}, {A: {operation: "set", line: 16}, C: 95}, {A: {direction: "down"}, C: 1}, {A: {direction: "down"}, C: 3}, {A: {item: "minecraft:dirt", direction: "down"}, C: 5}, {A: {item: "tool", direction: "down"}, C: 5}, {A: {direction: "up"}, C: 1}, {A: {item: "minecraft:carrot", direction: "down"}, C: 5}, {C: 90}, {A: {direction: "down"}, C: 10}, {A: {name: '{"text":"x"}', condition: "counter", type: "counter", operation: ">=", value: '{"text":"size_x"}'}, C: 92}, {A: {operation: "set", line: 22}, C: 95}, {A: {name: '{"text":"x"}', type: "value", operation: "+=", value: 1}, C: 91}, {A: {direction: "forward"}, C: 1}, {A: {operation: "set", line: 7}, C: 95}, {A: {name: '{"text":"x"}', condition: "counter", type: "value", operation: "<=", value: 1}, C: 92}, {A: {operation: "add", line: 4}, C: 95}, {A: {direction: "back"}, C: 1}, {A: {name: '{"text":"x"}', type: "value", operation: "-=", value: 1}, C: 91}, {A: {operation: "set", line: 22}, C: 95}, {A: {name: '{"text":"y"}', condition: "counter", type: "counter", operation: ">=", value: '{"text":"size_y"}'}, C: 92}, {A: {operation: "set", line: 34}, C: 95}, {A: {direction: "left"}, C: 2}, {A: {direction: "forward"}, C: 1}, {A: {direction: "right"}, C: 2}, {A: {name: '{"text":"y"}', type: "value", operation: "+=", value: 1}, C: 91}, {A: {operation: "set", line: 7}, C: 95}, {A: {direction: "right"}, C: 2}, {A: {name: '{"text":"y"}', condition: "counter", type: "value", operation: "<=", value: 1}, C: 92}, {A: {operation: "set", line: 40}, C: 95}, {A: {name: '{"text":"y"}', type: "value", operation: "-=", value: 1}, C: 91}, {A: {direction: "forward"}, C: 1}, {A: {operation: "remove", line: 4}, C: 95}, {A: {direction: "left"}, C: 2}, {A: {operation: "set", line: 7}, C: 95}]

# TODO - Dance! - Generate a random number between 1 and 6 and choose a move/turn direction based on the result.
# execute if score @s tc.trigger matches 4 run data modify storage tc:tmp import set value [{PauseOnError: 0b, AutoFuel: 1b, Locked: 1b, AutoMine: 0b, SafeMine:1b, ShowText:0b, DamagePlayers:0b, ClearCounters:1b}, {A: {name: '{"text":"direction"}', type: "random", operation: "=", value: 6}, C: 91}, {A: {name: '{"text":"direction"}', condition: "counter", type: "value", operation: "=", value: 1}, C: 92}, {A: {direction: "forward"}, C: 1}, {A: {name: '{"text":"direction"}', condition: "counter", type: "value", operation: "=", value: 2}, C: 92}, {A: {direction: "back"}, C: 1}, {A: {name: '{"text":"direction"}', condition: "counter", type: "value", operation: "=", value: 3}, C: 92}, {A: {direction: "left"}, C: 1}, {A: {name: '{"text":"direction"}', condition: "counter", type: "value", operation: "=", value: 4}, C: 92}, {A: {direction: "right"}, C: 1}, {A: {name: '{"text":"direction"}', condition: "counter", type: "value", operation: "=", value: 5}, C: 92}, {A: {direction: "left"}, C: 2}, {A: {name: '{"text":"direction"}', condition: "counter", type: "value", operation: "=", value: 6}, C: 92}, {A: {direction: "right"}, C: 2}, {A: {operation: "set", line: 1}, C: 95}]

# TODO - Travel to a defined position, [target_x] [target_y] [target_z]. Start by moving forward to understand the facing direction and turn South. Travel to target Y, Z, X.
# execute if score @s tc.trigger matches 5 run data modify storage tc:tmp import set value [{PauseOnError: 1b, AutoFuel: 1b, Locked: 1b, AutoMine: 1b, SafeMine:1b, ShowText:0b, DamagePlayers:0b, ClearCounters:1b}, {A: {name: '{"text":"target_x"}', type: "value", operation: "=", value: -15}, C: 91}, {A: {name: '{"text":"target_y"}', type: "value", operation: "=", value: 64}, C: 91}, {A: {name: '{"text":"target_z"}', type: "value", operation: "=", value: 10}, C: 91}, {C: 90}, {A: {name: '{"text":"x"}', type: "pos", operation: "=", value: "x"}, C: 91}, {A: {name: '{"text":"z"}', type: "pos", operation: "=", value: "z"}, C: 91}, {A: {direction: "forward"}, C: 1}, {A: {name: '{"text":"new_x"}', type: "pos", operation: "=", value: "x"}, C: 91}, {A: {name: '{"text":"new_z"}', type: "pos", operation: "=", value: "z"}, C: 91}, {A: {direction: "back"}, C: 1}, {A: {name: '{"text":"new_x"}', condition: "counter", type: "counter", operation: ">", value: '{"text":"x"}'}, C: 92}, {A: {direction: "right"}, C: 2}, {A: {name: '{"text":"new_x"}', condition: "counter", type: "counter", operation: "<", value: '{"text":"x"}'}, C: 92}, {A: {direction: "left"}, C: 2}, {A: {name: '{"text":"new_z"}', condition: "counter", type: "counter", operation: ">", value: '{"text":"z"}'}, C: 92}, {A: {operation: "set", line: 20}, C: 95}, {A: {name: '{"text":"new_z"}', condition: "counter", type: "counter", operation: "<", value: '{"text":"z"}'}, C: 92}, {A: {direction: "back"}, C: 2}, {C: 90}, {A: {name: '{"text":"y"}', type: "counter", operation: "=", value: '{"text":"target_y"}'}, C: 91}, {A: {name: '{"text":"y"}', type: "pos", operation: "-=", value: "y"}, C: 91}, {A: {name: '{"text":"y"}', condition: "counter", type: "value", operation: "=", value: 0}, C: 92}, {A: {operation: "set", line: 30}, C: 95}, {A: {name: '{"text":"y"}', condition: "counter", type: "value", operation: ">", value: 0}, C: 92}, {A: {direction: "up"}, C: 1}, {A: {name: '{"text":"y"}', condition: "counter", type: "value", operation: "<", value: 0}, C: 92}, {A: {direction: "down"}, C: 1}, {A: {operation: "set", line: 20}, C: 95}, {C: 90}, {A: {name: '{"text":"z"}', type: "counter", operation: "=", value: '{"text":"target_z"}'}, C: 91}, {A: {name: '{"text":"z"}', type: "pos", operation: "-=", value: "z"}, C: 91}, {A: {name: '{"text":"z"}', condition: "counter", type: "value", operation: "=", value: 0}, C: 92}, {A: {operation: "set", line: 39}, C: 95}, {A: {name: '{"text":"z"}', condition: "counter", type: "value", operation: ">", value: 0}, C: 92}, {A: {direction: "forward"}, C: 1}, {A: {name: '{"text":"z"}', condition: "counter", type: "value", operation: "<", value: 0}, C: 92}, {A: {direction: "back"}, C: 1}, {A: {operation: "set", line: 30}, C: 95}, {A: {direction: "left"}, C: 2}, {A: {name: '{"text":"x"}', type: "counter", operation: "=", value: '{"text":"target_x"}'}, C: 91}, {A: {name: '{"text":"x"}', type: "pos", operation: "-=", value: "x"}, C: 91}, {A: {name: '{"text":"x"}', condition: "counter", type: "value", operation: "=", value: 0}, C: 92}, {A: {operation: "set", line: 49}, C: 95}, {A: {name: '{"text":"x"}', condition: "counter", type: "value", operation: ">", value: 0}, C: 92}, {A: {direction: "forward"}, C: 1}, {A: {name: '{"text":"x"}', condition: "counter", type: "value", operation: "<", value: 0}, C: 92}, {A: {direction: "back"}, C: 1}, {A: {operation: "set", line: 40}, C: 95}, {A: {direction: "right"}, C: 2}]

# Mine a rectangle in a spiral pattern, with specified length, width and height. Due to its complexity, it's slightly slower than tc.trigger 1
execute if score @s tc.trigger matches 6 run data modify storage tc:tmp import set value [{PauseOnError: 1b, AutoFuel: 0b, SafeMine: 1b, Locked: 1b, ShowText: 0b, ClearCounters: 1b, AutoMine: 1b, DamagePlayers: 0b}, {A: {line: 7, operation: "set"}, C: 95}, {A: {comment: ""}, C: 90}, {A: {comment: "> EXAMPLE PROGRAM 6"}, C: 90}, {A: {comment: "Digs a rectangular hole with a"}, C: 90}, {A: {comment: "specified size in a spiral pattern"}, C: 90}, {A: {comment: ""}, C: 90}, {A: {name: "length", type: "value", operation: "=", value: 16}, C: 91}, {A: {name: "width", type: "value", operation: "=", value: 16}, C: 91}, {A: {name: "height", type: "value", operation: "=", value: 400}, C: 91}, {A: {comment: "Program start"}, C: 90}, {A: {comment: ""}, C: 90}, {A: {condition: "counter", name: "length", type: "value", operation: "<", value: 1}, C: 92}, {C: 98}, {A: {condition: "counter", name: "width", type: "value", operation: "<", value: 1}, C: 92}, {C: 98}, {A: {condition: "counter", name: "height", type: "value", operation: "<", value: 1}, C: 92}, {C: 98}, {A: {comment: ""}, C: 90}, {A: {comment: ""}, C: 90}, {A: {name: "x", type: "counter", operation: "=", value: "length"}, C: 91}, {A: {name: "y", type: "counter", operation: "=", value: "width"}, C: 91}, {A: {name: "r", type: "value", operation: "=", value: 1}, C: 91}, {A: {name: "y", type: "value", operation: "-=", value: 1}, C: 91}, {A: {comment: ""}, C: 90}, {A: {name: "dx", type: "counter", operation: "=", value: "x"}, C: 91}, {A: {condition: "counter", name: "r", type: "value", operation: "=", value: 1}, C: 92}, {A: {name: "dx", type: "value", operation: "-=", value: 1}, C: 91}, {A: {condition: "counter", name: "r", type: "value", operation: "=", value: -1}, C: 92}, {A: {name: "dx", type: "value", operation: "-=", value: 1}, C: 91}, {A: {comment: ""}, C: 90}, {A: {condition: "counter", name: "r", type: "value", operation: ">", value: 0}, C: 92}, {A: {name: "x", type: "value", operation: "-=", value: 1}, C: 91}, {A: {condition: "counter", name: "r", type: "value", operation: "<", value: 0}, C: 92}, {A: {name: "x", type: "value", operation: "+=", value: 1}, C: 91}, {A: {comment: ""}, C: 90}, {A: {condition: "counter", name: "x", type: "value", operation: "<", value: 0}, C: 92}, {A: {line: 91, operation: "set"}, C: 95}, {A: {condition: "counter", name: "x", type: "counter", operation: ">", value: "length"}, C: 92}, {A: {line: 107, operation: "set"}, C: 95}, {A: {comment: "move x"}, C: 90}, {A: {condition: "counter", name: "dx", type: "value", operation: "<", value: 1}, C: 92}, {A: {line: 51, operation: "set"}, C: 95}, {A: {name: "dx", type: "value", operation: "-=", value: 1}, C: 91}, {A: {direction: "forward"}, C: 1}, {A: {line: 4, operation: "remove"}, C: 95}, {A: {comment: ""}, C: 90}, {A: {comment: ""}, C: 90}, {A: {comment: ""}, C: 90}, {A: {comment: ""}, C: 90}, {A: {comment: "turn x"}, C: 90}, {A: {condition: "counter", name: "r", type: "value", operation: ">", value: 0}, C: 92}, {A: {direction: "left"}, C: 2}, {A: {condition: "counter", name: "r", type: "value", operation: "<", value: 0}, C: 92}, {A: {direction: "right"}, C: 2}, {A: {line: 60, operation: "set"}, C: 95}, {A: {comment: ""}, C: 90}, {A: {comment: ""}, C: 90}, {A: {comment: ""}, C: 90}, {A: {comment: ""}, C: 90}, {A: {name: "dy", type: "counter", operation: "=", value: "y"}, C: 91}, {A: {condition: "counter", name: "r", type: "value", operation: ">", value: 0}, C: 92}, {A: {name: "y", type: "value", operation: "-=", value: 1}, C: 91}, {A: {condition: "counter", name: "r", type: "value", operation: "<", value: 0}, C: 92}, {A: {name: "y", type: "value", operation: "+=", value: 1}, C: 91}, {A: {comment: ""}, C: 90}, {A: {condition: "counter", name: "y", type: "value", operation: "<", value: 0}, C: 92}, {A: {line: 91, operation: "set"}, C: 95}, {A: {condition: "counter", name: "y", type: "counter", operation: ">", value: "width"}, C: 92}, {A: {line: 107, operation: "set"}, C: 95}, {A: {comment: "move y"}, C: 90}, {A: {condition: "counter", name: "dy", type: "value", operation: "<", value: 1}, C: 92}, {A: {line: 81, operation: "set"}, C: 95}, {A: {name: "dy", type: "value", operation: "-=", value: 1}, C: 91}, {A: {direction: "forward"}, C: 1}, {A: {line: 4, operation: "remove"}, C: 95}, {A: {comment: ""}, C: 90}, {A: {comment: ""}, C: 90}, {A: {comment: ""}, C: 90}, {A: {comment: ""}, C: 90}, {A: {comment: "turn y"}, C: 90}, {A: {condition: "counter", name: "r", type: "value", operation: ">", value: 0}, C: 92}, {A: {direction: "left"}, C: 2}, {A: {condition: "counter", name: "r", type: "value", operation: "<", value: 0}, C: 92}, {A: {direction: "right"}, C: 2}, {A: {name: "r", type: "value", operation: "+=", value: 1}, C: 91}, {A: {comment: ""}, C: 90}, {A: {line: 25, operation: "set"}, C: 95}, {A: {comment: ""}, C: 90}, {A: {comment: ""}, C: 90}, {A: {comment: "in -> out"}, C: 90}, {A: {direction: "left"}, C: 2}, {A: {name: "height", type: "value", operation: "-=", value: 1}, C: 91}, {A: {condition: "counter", name: "height", type: "value", operation: "<=", value: 0}, C: 92}, {C: 98}, {A: {comment: ""}, C: 90}, {A: {direction: "down"}, C: 1}, {A: {name: "odd", type: "counter", operation: "=", value: "r"}, C: 91}, {A: {name: "odd", type: "value", operation: "%=", value: 2}, C: 91}, {A: {name: "r", type: "value", operation: "*=", value: -1}, C: 91}, {A: {name: "x", type: "value", operation: "+=", value: 1}, C: 91}, {A: {name: "y", type: "value", operation: "+=", value: 2}, C: 91}, {A: {condition: "counter", name: "odd", type: "value", operation: "=", value: 0}, C: 92}, {A: {line: 25, operation: "set"}, C: 95}, {A: {line: 60, operation: "set"}, C: 95}, {A: {comment: ""}, C: 90}, {A: {comment: "out -> in"}, C: 90}, {A: {name: "dx", type: "counter", operation: "=", value: "length"}, C: 91}, {A: {condition: "counter", name: "dx", type: "value", operation: "<", value: 2}, C: 92}, {A: {line: 4, operation: "add"}, C: 95}, {A: {direction: "forward"}, C: 1}, {A: {name: "dx", type: "value", operation: "-=", value: 1}, C: 91}, {A: {line: 4, operation: "remove"}, C: 95}, {A: {name: "height", type: "value", operation: "-=", value: 1}, C: 91}, {A: {direction: "right"}, C: 2}, {A: {direction: "right"}, C: 2}, {A: {condition: "counter", name: "height", type: "value", operation: "<=", value: 0}, C: 92}, {C: 98}, {A: {direction: "down"}, C: 1}, {A: {line: 20, operation: "set"}, C: 95}]

# Dig a 3x3 tunnel with a specified length
# TODO


#> ADD YOUR OWN PROGRAMS BELOW, FOLLOWING THE EXAMPLES ABOVE
# execute if score @s tc.trigger matches <number> run data modify storage tc:tmp import set value [<program>]
